(import 'library/common.prime)

;;;;

(let (x 1 y 2) (print (+ x y)) (newline))

(defmacro incr! (x) (semiquote assign! (unquote x) (+ (deref (unquote x)) 1)))

(let (n (ref 0))
  (loop (print (deref n) " ") (incr! n)
        (not (= (deref n) 5))))
(newline)

(def generate-macro (λ (name) (macro (y) (list '+ name y))))

;;;;

(import 'library/λ.prime)

(print (Eager↓ gensym (App plusλ twoλ threeλ)) "\n"
       (Eager↓ gensym fiveλ) "\n"
       (Eager↓ gensym (App fstλ (App (App pairλ oneλ) twoλ))) "\n"
       (Eager↓ gensym (App sndλ (App (App pairλ oneλ) twoλ))) "\n"
       (Eager↓ gensym (App (App (App fiveλ) (Lam "x" (App (var "S") (var "x"))))
                                            (var "Z"))) "\n"
       (Lazy↓ gensym (App (Lam "x" idfunλ) (App Mλ Mλ))) "\n")

;;;;

(import 'library/logic.prime)

(defthm test-thm (⊃ (var "B") (var "B"))
  (invariance (DICT "P" (var "B")) →-refl))

(def ∃ (λ (x P) (binder "∃" x P)))

(def τ₀ (∃ "y" (app "Ineq" (list (var "x") (var "y")))))
(print (subst (DICT "x" (var "y")) τ₀) "\n") ; “y” is already captured, so it’s safe to have it in substitution
(print (subst (DICT "x" (var "z")) τ₀) "\n")
(print (free (app "T" nil) τ₀) "\n")
(print τ₀ " & " (rebind "∀" τ₀) "\n")

(let (φ (veq (var "A") (var "B")))
  (print φ " & " (formula φ) "\n"))

(let (ψ (cr (var "A") (var "B") (var "C")))
  (print ψ " & " (dup ψ) "\n"))

(print (invariance (DICT "P" (var "A")) →-refl) "\n")
(print (¬¬-elim P) "\n")

;;;;

(print "fin")
(newline)