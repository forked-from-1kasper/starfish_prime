(import 'library/prelude.prime)

(defmacro defthm (name statement proof)
  (list 'progn (list 'def name proof)
    (list 'if (list '= (list 'formula name) statement)
      nil (list 'fail "defthm:" (list 'formula name) "≠" statement))))

(defmacro variables σ (cons 'progn (mapcar (λ (ε) (list 'def ε (list 'var (show ε)))) σ)))

(defun Π₁ (ε)   (get 0  (cdr ε)))
(defun Π₂ (ε)   (get 1  (cdr ε)))
(defun Π₃ (ε)   (get 2  (cdr ε)))
(defun Π₄ (ε)   (get 3  (cdr ε)))
(defun Π₅ (ε)   (get 4  (cdr ε)))
(defun Π₋ (ε n) (get n  (cdr ε)))
(defun #  (ε)   (length (cdr ε)))

(defun well-formed? σ
  (if (forall (λ (ε) (= (theory ε) (car σ))) (cdr σ)) nil
      (fail "expected theorem of " (car σ))))