(import 'library/common.prime)

(def ⊥ (app "Faux" nil))

(defun Implique (P Q) (app "Implique" (list P Q)))

(def ⊤ (Implique ⊥ ⊥))
(defun ⊃ σ (if (= σ nil) ⊤ (foldr Implique σ)))

(defun ¬    (P) (⊃ P ⊥))
(defun ¬¬   (P) (¬ (¬ P)))
(defun ¬¬¬  (P) (¬ (¬¬ P)))
(defun ¬¬¬¬ (P) (¬ (¬¬¬ P)))

(deftheory CL ;; classical zeroth-order logic
  (let (E (ref (SET "Implique" "Faux")))
    (def CL (opaque-definition E
              (λ (φ τ R) (define (+ φ "-intro") (postulate (⊃ τ R)))
                         (define (+ φ "-elim")  (postulate (⊃ R τ)))))))

  (defun invariance (θ T) (well-formed? "CL" T)
    (postulate (subst θ (formula T))))

  (defun modus-ponens (T₁ T₂) (well-formed? "CL" T₁ T₂)
    (case (formula T₁) (var "P")
          (formula T₂) (⊃ (var "P") (var "Q"))
      (postulate Q)))

  (defun veq (P Q) (postulate (⊃ P Q P)))

  (defun cr (P Q R) (postulate (⊃ (⊃ P Q R) (⊃ P Q) (⊃ P R))))

  (defun ¬¬-elim (P) (postulate (⊃ (¬¬ P) P))))

(defterm CL Or  (P Q) (⊃ (¬ P) Q))
(defterm CL And (P Q) (¬ (⊃ P (¬ Q))))
(defterm CL Iff (P Q) (And (⊃ P Q) (⊃ Q P)))

(defun ∨ σ (foldr Or  σ))
(defun ∧ σ (foldr And σ))

(defun ↔ σ (if (= (length σ) 0) ⊤
               (= (length σ) 1) (car σ)
               (= (length σ) 2) (Iff (car σ) (cadr σ))
               (And (Iff (car σ) (cadr σ)) (apply ↔ (cdr σ)))))

(defun refine σ
  (let (T (car σ) ω (ref (cdr σ)))
    (invariance (fold (λ (k Δ) (add k (dequeue ω) Δ))
                      (DICT) (fv (formula T))) T)))

(defun exact (φ T) (invariance (unify (formula T) φ) T))

(variables P Q R)

;; Γ ⊢ P₁ ⊃ P₂ ⊃ ... ⊃ Pₙ ⊃ Q → Γ ⊢ P₁ → Γ ⊢ P₂ → ... → Γ ⊢ Pₙ → Γ ⊢ Q
(defun mp σ (foldl modus-ponens (car σ) (cdr σ)))

;; Γ ⊢ Q → Γ ⊢ P ⊃ Q
(defun →-intro (P T) (modus-ponens T (veq (formula T) P)))

;; Γ ⊢ P ⊃ Q → Γ ⊢ P ⊃ P ⊃ Q
(defun dup (T) (→-intro (Π₁ (formula T)) T))

;; Γ ⊢ P ⊃ P ⊃ Q → Γ ⊢ P ⊃ Q
(defun contract (T)
  (case (formula T) (⊃ P P Q)
    (mp (cr P P Q) T (refine →-refl P))))

;; Γ ⊢ P ⊃ Q ⊃ R → Γ ⊢ Q ⊃ P ⊃ R
(defun flip (T) (case (formula T) (⊃ P Q R)
  (modus-ponens T (invariance (DICT "P" P "Q" Q "R" R) →-comm))))

(defun →-trans σ
  (let (φ (λ (T₁ T₂) (case (formula T₁) (⊃ P Q) (formula T₂) (⊃ Q R)
                       (mp (refine hypsyll₁ P Q R) T₂ T₁))))
    (foldr φ σ)))

;; Γ ⊢ Q ⊃ R → Γ ⊢ (P ⊃ Q) ⊃ (P ⊃ R)
(defun →-ant (P T) (case (formula T) (⊃ Q R) (mp (refine hypsyll₁ P Q R) T)))

;; Γ ⊢ P ⊃ Q → Γ ⊢ (Q ⊃ R) ⊃ (P ⊃ R)
(defun →-con (R T) (case (formula T) (⊃ P Q) (mp (refine hypsyll₂ P Q R) T)))

(defthm exfalso (⊃ ⊥ P) (mp (cr ⊥ (¬¬ P) P) (→-intro ⊥ (¬¬-elim P)) (veq ⊥ (¬ P))))

(defthm →-refl (⊃ P P) (mp (cr P (⊃ P P) P) (veq P (⊃ P P)) (veq P P)))

(defthm truth ⊤ (refine →-refl ⊥))

(defthm cut (⊃ P (⊃ P Q) Q)
  (let (T₁ (cr P (⊃ (⊃ P Q) P) (⊃ (⊃ P Q) Q))
        T₂ (→-intro P (mp (cr (⊃ P Q) P Q) (refine →-refl (⊃ P Q))))
        T₃ (veq P (⊃ P Q)))
    (mp T₁ T₂ T₃)))

;; Γ ⊢ P → ¬¬P
(defun ¬¬-intro (P) (invariance (DICT "P" P "Q" ⊥) cut))

(defthm →-comm (⊃ (⊃ P Q R) (⊃ Q P R))
  (let (T₁ (mp (cr Q (⊃ (⊃ Q R) R) (⊃ P (⊃ Q R) R))
               (→-intro Q (veq (⊃ (⊃ Q R) R) P))
               (refine cut Q R))
        T₂ (→-intro Q (cr P (⊃ Q R) R))
        T₃ (cr Q (⊃ P (⊃ Q R) R) (⊃ (⊃ P Q R) P R))
        T₄ (cr Q (⊃ P Q R) (⊃ P R))
        T₅ (cr (⊃ P Q R) (⊃ Q P Q R) (⊃ Q P R))
        T₆ (veq (⊃ P (⊃ Q R)) Q))
    (mp T₅ (→-intro (⊃ P Q R) (mp T₄ (mp T₃ T₂ T₁))) T₆)))

;; https://en.wikipedia.org/wiki/Hypothetical_syllogism#Proof
(defthm hypsyll₁ (⊃ (⊃ Q R) (⊃ P Q) (⊃ P R))
  (let (T₁ (mp (veq (⊃ (⊃ P Q R) (⊃ P Q) (⊃ P R)) (⊃ Q R)) (cr P Q R))
        T₂ (veq (⊃ Q R) P)
        T₃ (cr (⊃ Q R) (⊃ P Q R) (⊃ (⊃ P Q) (⊃ P R))))
    (mp T₃ T₁ T₂)))

(defthm hypsyll₂ (⊃ (⊃ P Q) (⊃ Q R) (⊃ P R)) (flip hypsyll₁))

(def contrapos₁ (exact (⊃ (⊃ P Q) (⊃ (¬ Q) (¬ P))) hypsyll₂))

(defthm contrapos₂ (⊃ (⊃ (¬ Q) (¬ P)) (⊃ P Q))
  (→-trans (refine contrapos₁ (¬ Q) (¬ P))
           (→-con (¬¬ Q) (¬¬-intro P))
           (→-ant P (¬¬-elim Q))))

(defthm contrapos₃ (⊃ (⊃ P (¬ Q)) (⊃ Q (¬ P)))
  (→-trans (refine contrapos₁ P (¬ Q))
           (→-con (¬ P) (¬¬-intro Q))))

(defthm contrapos₄ (⊃ (⊃ (¬ P) Q) (⊃ (¬ Q) P))
  (→-trans (refine contrapos₁ (¬ P) Q)
           (→-ant (¬ Q) (¬¬-elim P))))

(defthm absurd₁ (⊃ (¬ P) P Q)
  (→-ant P (refine exfalso Q)))

(defthm absurd₂ (⊃ P (¬ P) Q) (flip absurd₁))

(defthm ∧-left (⊃ (∧ P Q) P)
  (→-trans And-elim (mp (refine contrapos₄ P (⊃ P (¬ Q)))
                        (refine absurd₁ P (¬ Q)))))

(defthm ∧-right (⊃ (∧ P Q) Q)
  (→-trans And-elim (mp (refine contrapos₄ Q (⊃ P (¬ Q)))
                        (veq (¬ Q) P))))

(defthm ∧-intro (⊃ P Q (∧ P Q))
  (mp (→-ant P (→-trans (refine contrapos₃ (⊃ P (¬ Q)) Q)
                        (→-ant Q And-intro)))
      (refine cut P (¬ Q))))

(defthm ∧-rec (⊃ (⊃ R P) (⊃ R Q) (⊃ R (∧ P Q)))
  (→-trans (→-ant R ∧-intro) (cr R Q (∧ P Q))))

(defthm ∧-comm (⊃ (∧ P Q) (∧ Q P))
  (mp (refine ∧-rec Q P (∧ P Q)) ∧-right ∧-left))

(defthm ∧-assoc-left (⊃ (∧ (∧ P Q) R) (∧ P (∧ Q R)))
  (mp (refine ∧-rec P (∧ Q R) (∧ (∧ P Q) R))
      (→-trans (exact (⊃ (∧ (∧ P Q) R) (∧ P Q)) ∧-left) ∧-left)
      (mp (refine ∧-rec Q R (∧ (∧ P Q) R))
          (→-trans (exact (⊃ (∧ (∧ P Q) R) (∧ P Q)) ∧-left) ∧-right)
          (exact (⊃ (∧ (∧ P Q) R) R) ∧-right))))

(defthm ∧-assoc-right (⊃ (∧ P (∧ Q R)) (∧ (∧ P Q) R))
  (mp (refine ∧-rec (∧ P Q) R (∧ P (∧ Q R)))
      (mp (refine ∧-rec P Q (∧ P (∧ Q R)))
          (exact (⊃ (∧ P (∧ Q R)) P) ∧-left)
          (→-trans (exact (⊃ (∧ P (∧ Q R)) (∧ Q R)) ∧-right)
                   (exact (⊃ (∧ Q R) Q) ∧-left)))
      (→-trans (exact (⊃ (∧ P (∧ Q R)) (∧ Q R)) ∧-right)
               (exact (⊃ (∧ Q R) R) ∧-right))))

(defthm ∨-left (⊃ P (∨ P Q))
  (mp (→-ant P Or-intro) absurd₂))

(defthm ∨-right (⊃ Q (∨ P Q))
  (mp (→-ant Q Or-intro) (veq Q (¬ P))))

(defthm lem (∨ P (¬ P))
  (mp (refine Or-intro P (¬ P))
      (refine →-refl (¬ P))))